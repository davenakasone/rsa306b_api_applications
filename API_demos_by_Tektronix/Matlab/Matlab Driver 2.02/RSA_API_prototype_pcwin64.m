function [methodinfo,structs,enuminfo,ThunkLibName]=RSA_API_prototype_pcwin64
%RSA_API_PROTOTYPE_PCWIN64 Create structures to define interfaces found in 'RSA_API'.

%This function was generated by loadlibrary.m parser version  on Wed Apr 20 10:09:29 2016
%perl options:'RSA_API.i -outfile=RSA_API_prototype_pcwin64.m -thunkfile=RSA_API_thunk_pcwin64.dll.c -header=RSA_API.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'RSA_API_thunk_pcwin64.dll');
%  const char * DEVICE_GetErrorString ( ReturnStatus status ); 
fcns.thunkname{fcnNum}='cstringReturnStatusThunk';fcns.name{fcnNum}='DEVICE_GetErrorString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'ReturnStatus'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_Search ( int * numDevicesFound , int deviceIDs [], char deviceSerial [][ DEVSRCH_SERIAL_MAX_STRLEN ], char deviceType [][ DEVSRCH_TYPE_MAX_STRLEN ]); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrcstringcstringThunk';fcns.name{fcnNum}='DEVICE_Search'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_SearchW ( int * numDevicesFound , int deviceIDs [], wchar_t deviceSerial [][ DEVSRCH_SERIAL_MAX_STRLEN ], wchar_t deviceType [][ DEVSRCH_TYPE_MAX_STRLEN ]); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DEVICE_SearchW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_Connect ( int deviceID ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='DEVICE_Connect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_Reset ( int deviceID ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='DEVICE_Reset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_Disconnect (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DEVICE_Disconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetNomenclature ( char * nomenclature ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='DEVICE_GetNomenclature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetNomenclatureW ( wchar_t * nomenclature ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DEVICE_GetNomenclatureW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetSerialNumber ( char * serialNum ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='DEVICE_GetSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetAPIVersion ( char * apiVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='DEVICE_GetAPIVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetFWVersion ( char * fwVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='DEVICE_GetFWVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetFPGAVersion ( char * fpgaVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='DEVICE_GetFPGAVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetHWVersion ( char * hwVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='DEVICE_GetHWVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetInfo ( DEVICE_INFO * devInfo ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DEVICE_GetInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DEVICE_INFOPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetOverTemperatureStatus ( bool * overTemperature ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DEVICE_GetOverTemperatureStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_Preset (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='CONFIG_Preset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_SetReferenceLevel ( double refLevel ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='CONFIG_SetReferenceLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetReferenceLevel ( double * refLevel ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetReferenceLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetMaxCenterFreq ( double * maxCF ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetMaxCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetMinCenterFreq ( double * minCF ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetMinCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_SetCenterFreq ( double cf ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='CONFIG_SetCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetCenterFreq ( double * cf ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_SetExternalRefEnable ( bool exRefEn ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='CONFIG_SetExternalRefEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetExternalRefEnable ( bool * exRefEn ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetExternalRefEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetExternalRefFrequency ( double * extFreq ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetExternalRefFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetAutoAttenuationEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetAutoAttenuationEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_SetAutoAttenuationEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='CONFIG_SetAutoAttenuationEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetRFPreampEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetRFPreampEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_SetRFPreampEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='CONFIG_SetRFPreampEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_GetRFAttenuator ( double * value ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='CONFIG_GetRFAttenuator'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus CONFIG_SetRFAttenuator ( double value ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='CONFIG_SetRFAttenuator'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_SetTriggerMode ( TriggerMode mode ); 
fcns.thunkname{fcnNum}='ReturnStatusTriggerModeThunk';fcns.name{fcnNum}='TRIG_SetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerMode'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_GetTriggerMode ( TriggerMode * mode ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRIG_GetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerModePtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_SetTriggerSource ( TriggerSource source ); 
fcns.thunkname{fcnNum}='ReturnStatusTriggerSourceThunk';fcns.name{fcnNum}='TRIG_SetTriggerSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerSource'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_GetTriggerSource ( TriggerSource * source ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRIG_GetTriggerSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerSourcePtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_SetTriggerTransition ( TriggerTransition transition ); 
fcns.thunkname{fcnNum}='ReturnStatusTriggerTransitionThunk';fcns.name{fcnNum}='TRIG_SetTriggerTransition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerTransition'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_GetTriggerTransition ( TriggerTransition * transition ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRIG_GetTriggerTransition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerTransitionPtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_SetIFPowerTriggerLevel ( double level ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='TRIG_SetIFPowerTriggerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_GetIFPowerTriggerLevel ( double * level ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRIG_GetIFPowerTriggerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_SetTriggerPositionPercent ( double trigPosPercent ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='TRIG_SetTriggerPositionPercent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_GetTriggerPositionPercent ( double * trigPosPercent ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRIG_GetTriggerPositionPercent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRIG_ForceTrigger (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='TRIG_ForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus ALIGN_GetWarmupStatus ( bool * warmedUp ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='ALIGN_GetWarmupStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus ALIGN_GetAlignmentNeeded ( bool * needed ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='ALIGN_GetAlignmentNeeded'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus ALIGN_RunAlignment (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='ALIGN_RunAlignment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DEVICE_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_Run (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DEVICE_Run'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_Stop (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DEVICE_Stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_PrepareForRun (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DEVICE_PrepareForRun'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_StartFrameTransfer (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DEVICE_StartFrameTransfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DEVICE_GetEventStatus ( int eventID , bool * eventOccurred , uint64_t * eventTimestamp ); 
fcns.thunkname{fcnNum}='ReturnStatusint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DEVICE_GetEventStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'boolPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_GetTimestampRate ( uint64_t * o_refTimestampRate ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='REFTIME_GetTimestampRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_GetCurrentTime ( time_t * o_timeSec , uint64_t * o_timeNsec , uint64_t * o_timestamp ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='REFTIME_GetCurrentTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int64Ptr', 'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_GetTimeFromTimestamp ( uint64_t i_timestamp , time_t * o_timeSec , uint64_t * o_timeNsec ); 
fcns.thunkname{fcnNum}='ReturnStatusuint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='REFTIME_GetTimeFromTimestamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint64', 'int64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_GetTimestampFromTime ( time_t i_timeSec , uint64_t i_timeNsec , uint64_t * o_timestamp ); 
fcns.thunkname{fcnNum}='ReturnStatusint64uint64voidPtrThunk';fcns.name{fcnNum}='REFTIME_GetTimestampFromTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_GetIntervalSinceRefTimeSet ( double * sec ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='REFTIME_GetIntervalSinceRefTimeSet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_SetReferenceTime ( time_t refTimeSec , uint64_t refTimeNsec , uint64_t refTimestamp ); 
fcns.thunkname{fcnNum}='ReturnStatusint64uint64uint64Thunk';fcns.name{fcnNum}='REFTIME_SetReferenceTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64'};fcnNum=fcnNum+1;
%  ReturnStatus REFTIME_GetReferenceTime ( time_t * refTimeSec , uint64_t * refTimeNsec , uint64_t * refTimestamp ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='REFTIME_GetReferenceTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int64Ptr', 'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetMaxIQBandwidth ( double * maxBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetMaxIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetMinIQBandwidth ( double * minBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetMinIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetMaxIQRecordLength ( int * maxSamples ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetMaxIQRecordLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_SetIQBandwidth ( double iqBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='IQBLK_SetIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQBandwidth ( double * iqBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQSampleRate ( double * iqSampleRate ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetIQSampleRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_SetIQRecordLength ( int recordLength ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IQBLK_SetIQRecordLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQRecordLength ( int * recordLength ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetIQRecordLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_AcquireIQData (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='IQBLK_AcquireIQData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_WaitForIQDataReady ( int timeoutMsec , bool * ready ); 
fcns.thunkname{fcnNum}='ReturnStatusint32voidPtrThunk';fcns.name{fcnNum}='IQBLK_WaitForIQDataReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQData ( float * iqData , int * outLength , int reqLength ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='IQBLK_GetIQData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'singlePtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQDataDeinterleaved ( float * iData , float * qData , int * outLength , int reqLength ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='IQBLK_GetIQDataDeinterleaved'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQDataCplx ( Cplx32 * iqData , int * outLength , int reqLength ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='IQBLK_GetIQDataCplx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'Cplx32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQBLK_GetIQAcqInfo ( IQBLK_ACQINFO * acqInfo ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQBLK_GetIQAcqInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'IQBLK_ACQINFOPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_SetEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='SPECTRUM_SetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='SPECTRUM_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_SetDefault (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='SPECTRUM_SetDefault'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_SetSettings ( Spectrum_Settings settings ); 
fcns.thunkname{fcnNum}='ReturnStatusSpectrum_SettingsThunk';fcns.name{fcnNum}='SPECTRUM_SetSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'Spectrum_Settings'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_GetSettings ( Spectrum_Settings * settings ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='SPECTRUM_GetSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'Spectrum_SettingsPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_SetTraceType ( SpectrumTraces trace , bool enable , SpectrumDetectors detector ); 
fcns.thunkname{fcnNum}='ReturnStatusSpectrumTracesuint8SpectrumDetectorsThunk';fcns.name{fcnNum}='SPECTRUM_SetTraceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'SpectrumTraces', 'uint8', 'SpectrumDetectors'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_GetTraceType ( SpectrumTraces trace , bool * enable , SpectrumDetectors * detector ); 
fcns.thunkname{fcnNum}='ReturnStatusSpectrumTracesvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SPECTRUM_GetTraceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'SpectrumTraces', 'boolPtr', 'SpectrumDetectorsPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_GetLimits ( Spectrum_Limits * limits ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='SPECTRUM_GetLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'Spectrum_LimitsPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_AcquireTrace (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='SPECTRUM_AcquireTrace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_WaitForTraceReady ( int timeoutMsec , bool * ready ); 
fcns.thunkname{fcnNum}='ReturnStatusint32voidPtrThunk';fcns.name{fcnNum}='SPECTRUM_WaitForTraceReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_GetTrace ( SpectrumTraces trace , int maxTracePoints , float * traceData , int * outTracePoints ); 
fcns.thunkname{fcnNum}='ReturnStatusSpectrumTracesint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SPECTRUM_GetTrace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'SpectrumTraces', 'int32', 'singlePtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus SPECTRUM_GetTraceInfo ( Spectrum_TraceInfo * traceInfo ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='SPECTRUM_GetTraceInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'Spectrum_TraceInfoPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='DPX_SetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetParameters ( double fspan , double rbw , int32_t bitmapWidth , int32_t tracePtsPerPixel , VerticalUnitType yUnit , double yTop , double yBottom , bool infinitePersistence , double persistenceTimeSec , bool showOnlyTrigFrame ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubledoubleint32int32VerticalUnitTypedoubledoubleuint8doubleuint8Thunk';fcns.name{fcnNum}='DPX_SetParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double', 'double', 'int32', 'int32', 'VerticalUnitType', 'double', 'double', 'uint8', 'double', 'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_Configure ( bool enableSpectrum , bool enableSpectrogram ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8uint8Thunk';fcns.name{fcnNum}='DPX_Configure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8', 'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSettings ( DPX_SettingsStruct * pSettings ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DPX_SettingsStructPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetSpectrumTraceType ( int32_t traceIndex , TraceType type ); 
fcns.thunkname{fcnNum}='ReturnStatusint32TraceTypeThunk';fcns.name{fcnNum}='DPX_SetSpectrumTraceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'TraceType'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetRBWRange ( double fspan , double * minRBW , double * maxRBW ); 
fcns.thunkname{fcnNum}='ReturnStatusdoublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPX_GetRBWRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_Reset (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DPX_Reset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DPX_WaitForDataReady ( int timeoutMsec , bool * ready ); 
fcns.thunkname{fcnNum}='ReturnStatusint32voidPtrThunk';fcns.name{fcnNum}='DPX_WaitForDataReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetFrameInfo ( int64_t * frameCount , int64_t * fftCount ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPX_GetFrameInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetSogramParameters ( double timePerBitmapLine , double timeResolution , double maxPower , double minPower ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='DPX_SetSogramParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetSogramTraceType ( TraceType traceType ); 
fcns.thunkname{fcnNum}='ReturnStatusTraceTypeThunk';fcns.name{fcnNum}='DPX_SetSogramTraceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TraceType'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramSettings ( DPX_SogramSettingsStruct * pSettings ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetSogramSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DPX_SogramSettingsStructPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLineCountLatest ( int32_t * lineCount ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetSogramHiResLineCountLatest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLineTriggered ( bool * triggered , int32_t lineIndex ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32Thunk';fcns.name{fcnNum}='DPX_GetSogramHiResLineTriggered'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLineTimestamp ( double * timestamp , int32_t lineIndex ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32Thunk';fcns.name{fcnNum}='DPX_GetSogramHiResLineTimestamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLine ( int16_t * vData , int32_t * vDataSize , int32_t lineIndex , double * dataSF , int32_t tracePoints , int32_t firstValidPoint ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrint32voidPtrint32int32Thunk';fcns.name{fcnNum}='DPX_GetSogramHiResLine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int16Ptr', 'int32Ptr', 'int32', 'doublePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetFrameBuffer ( DPX_FrameBuffer * frameBuffer ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetFrameBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DPX_FrameBufferPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_FinishFrameBuffer (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DPX_FinishFrameBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DPX_IsFrameBufferAvailable ( bool * frameAvailable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_IsFrameBufferAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetMode ( AudioDemodMode mode ); 
fcns.thunkname{fcnNum}='ReturnStatusAudioDemodModeThunk';fcns.name{fcnNum}='AUDIO_SetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'AudioDemodMode'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetMode ( AudioDemodMode * mode ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'AudioDemodModePtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetVolume ( float volume ); 
fcns.thunkname{fcnNum}='ReturnStatusfloatThunk';fcns.name{fcnNum}='AUDIO_SetVolume'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetVolume ( float * _volume ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetVolume'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetMute ( bool mute ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='AUDIO_SetMute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetMute ( bool * _mute ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetMute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetFrequencyOffset ( double freqOffsetHz ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='AUDIO_SetFrequencyOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetFrequencyOffset ( double * freqOffsetHz ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetFrequencyOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_Start (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='AUDIO_Start'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_Stop (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='AUDIO_Stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetData ( int16_t * data , uint16_t inSize , uint16_t * outSize ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtruint16voidPtrThunk';fcns.name{fcnNum}='AUDIO_GetData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int16Ptr', 'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='IFSTREAM_SetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_GetActiveStatus ( bool * active ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IFSTREAM_GetActiveStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetDiskFileMode ( StreamingMode mode ); 
fcns.thunkname{fcnNum}='ReturnStatusStreamingModeThunk';fcns.name{fcnNum}='IFSTREAM_SetDiskFileMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'StreamingMode'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetDiskFilePath ( const char * path ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='IFSTREAM_SetDiskFilePath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetDiskFilenameBase ( const char * base ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='IFSTREAM_SetDiskFilenameBase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetDiskFilenameSuffix ( int suffixCtl ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IFSTREAM_SetDiskFilenameSuffix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetDiskFileLength ( int msec ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IFSTREAM_SetDiskFileLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IFSTREAM_SetDiskFileCount ( int count ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IFSTREAM_SetDiskFileCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetMaxAcqBandwidth ( double * maxBandwidthHz ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetMaxAcqBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetMinAcqBandwidth ( double * minBandwidthHz ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetMinAcqBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetAcqBandwidth ( double bwHz_req ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='IQSTREAM_SetAcqBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetAcqParameters ( double * bwHz_act , double * srSps ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetAcqParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetOutputConfiguration ( IQSOUTDEST dest , IQSOUTDTYPE dtype ); 
fcns.thunkname{fcnNum}='ReturnStatusIQSOUTDESTIQSOUTDTYPEThunk';fcns.name{fcnNum}='IQSTREAM_SetOutputConfiguration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'IQSOUTDEST', 'IQSOUTDTYPE'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetIQDataBufferSize ( int reqSize ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IQSTREAM_SetIQDataBufferSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetIQDataBufferSize ( int * maxSize ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetIQDataBufferSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetDiskFilenameBaseW ( const wchar_t * filenameBaseW ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_SetDiskFilenameBaseW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetDiskFilenameBase ( const char * filenameBase ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='IQSTREAM_SetDiskFilenameBase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetDiskFilenameSuffix ( int suffixCtl ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IQSTREAM_SetDiskFilenameSuffix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_SetDiskFileLength ( int msec ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='IQSTREAM_SetDiskFileLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_Start (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='IQSTREAM_Start'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_Stop (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='IQSTREAM_Stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetIQData ( void * iqdata , int * iqlen , IQSTRMIQINFO * iqinfo ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetIQData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'IQSTRMIQINFOPtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetDiskFileWriteStatus ( bool * isComplete , bool * isWriting ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetDiskFileWriteStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr', 'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus IQSTREAM_GetDiskFileInfo ( IQSTRMFILEINFO * fileinfo ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IQSTREAM_GetDiskFileInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'IQSTRMFILEINFOPtr'};fcnNum=fcnNum+1;
%  void IQSTREAM_ClearAcqStatus (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='IQSTREAM_ClearAcqStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus PLAYBACK_OpenDiskFile ( const wchar_t * fileName , int startPercentage , int stopPercentage , double skipTimeBetweenFullAcquisitions , bool loopAtEndOfFile , bool emulateRealTime ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32int32doubleuint8uint8Thunk';fcns.name{fcnNum}='PLAYBACK_OpenDiskFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32', 'int32', 'double', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus PLAYBACK_GetReplayComplete ( bool * complete ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='PLAYBACK_GetReplayComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRKGEN_GetHwInstalled ( bool * installed ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRKGEN_GetHwInstalled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRKGEN_SetEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='TRKGEN_SetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus TRKGEN_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRKGEN_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus TRKGEN_SetOutputLevel ( double leveldBm ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='TRKGEN_SetOutputLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus TRKGEN_GetOutputLevel ( double * leveldBm ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='TRKGEN_GetOutputLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_GetHwInstalled ( bool * installed ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GNSS_GetHwInstalled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_SetEnable ( bool enable ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='GNSS_SetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_GetEnable ( bool * enable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GNSS_GetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_SetSatSystem ( GNSS_SATSYS satSystem ); 
fcns.thunkname{fcnNum}='ReturnStatusGNSS_SATSYSThunk';fcns.name{fcnNum}='GNSS_SetSatSystem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'GNSS_SATSYS'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_GetSatSystem ( GNSS_SATSYS * satSystem ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GNSS_GetSatSystem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'GNSS_SATSYSPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_SetAntennaPower ( bool powered ); 
fcns.thunkname{fcnNum}='ReturnStatusuint8Thunk';fcns.name{fcnNum}='GNSS_SetAntennaPower'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_GetAntennaPower ( bool * powered ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GNSS_GetAntennaPower'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_GetNavMessageData ( int * msgLen , const char ** message ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GNSS_GetNavMessageData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GNSS_ClearNavMessageData (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='GNSS_ClearNavMessageData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus GNSS_Get1PPSTimestamp ( bool * isValid , uint64_t * timestamp1PPS ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GNSS_Get1PPSTimestamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus POWER_GetStatus ( POWER_INFO * powerInfo ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='POWER_GetStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'POWER_INFOPtr'};fcnNum=fcnNum+1;
structs.Cplx32.members=struct('i', 'single', 'q', 'single');
structs.CplxInt32.members=struct('i', 'int32', 'q', 'int32');
structs.CplxInt16.members=struct('i', 'int16', 'q', 'int16');
structs.DEVICE_INFO.members=struct('nomenclature', 'cstring', 'serialNum', 'cstring', 'apiVersion', 'cstring', 'fwVersion', 'cstring', 'fpgaVersion', 'cstring', 'hwVersion', 'cstring');
structs.IQBLK_ACQINFO.members=struct('sample0Timestamp', 'uint64', 'triggerSampleIndex', 'uint64', 'triggerTimestamp', 'uint64', 'acqStatus', 'uint32');
structs.Spectrum_Settings.members=struct('span', 'double', 'rbw', 'double', 'enableVBW', 'uint8', 'vbw', 'double', 'traceLength', 'int32', 'window', 'SpectrumWindows', 'verticalUnit', 'SpectrumVerticalUnits', 'actualStartFreq', 'double', 'actualStopFreq', 'double', 'actualFreqStepSize', 'double', 'actualRBW', 'double', 'actualVBW', 'double', 'actualNumIQSamples', 'int32');
structs.Spectrum_Limits.members=struct('maxSpan', 'double', 'minSpan', 'double', 'maxRBW', 'double', 'minRBW', 'double', 'maxVBW', 'double', 'minVBW', 'double', 'maxTraceLength', 'int32', 'minTraceLength', 'int32');
structs.Spectrum_TraceInfo.members=struct('timestamp', 'uint64', 'acqDataStatus', 'uint16');
structs.DPX_FrameBuffer.members=struct('fftPerFrame', 'int32', 'fftCount', 'int64', 'frameCount', 'int64', 'timestamp', 'double', 'acqDataStatus', 'uint32', 'minSigDuration', 'double', 'minSigDurOutOfRange', 'uint8', 'spectrumBitmapWidth', 'int32', 'spectrumBitmapHeight', 'int32', 'spectrumBitmapSize', 'int32', 'spectrumTraceLength', 'int32', 'numSpectrumTraces', 'int32', 'spectrumEnabled', 'uint8', 'spectrogramEnabled', 'uint8', 'spectrumBitmap', 'singlePtr', 'spectrumTraces', 'singlePtrPtr', 'sogramBitmapWidth', 'int32', 'sogramBitmapHeight', 'int32', 'sogramBitmapSize', 'int32', 'sogramBitmapNumValidLines', 'int32', 'sogramBitmap', 'uint8Ptr', 'sogramBitmapTimestampArray', 'doublePtr', 'sogramBitmapContainTriggerArray', 'int16Ptr');
structs.DPX_SogramSettingsStruct.members=struct('bitmapWidth', 'int32', 'bitmapHeight', 'int32', 'sogramTraceLineTime', 'double', 'sogramBitmapLineTime', 'double');
structs.DPX_SettingsStruct.members=struct('enableSpectrum', 'uint8', 'enableSpectrogram', 'uint8', 'bitmapWidth', 'int32', 'bitmapHeight', 'int32', 'traceLength', 'int32', 'decayFactor', 'single', 'actualRBW', 'double');
structs.IQSTRMIQINFO.members=struct('timestamp', 'uint64', 'triggerCount', 'int32', 'triggerIndices', 'int32Ptr', 'scaleFactor', 'double', 'acqStatus', 'uint32');
structs.IQSTRMFILEINFO.members=struct('numberSamples', 'uint64', 'sample0Timestamp', 'uint64', 'triggerSampleIndex', 'uint64', 'triggerTimestamp', 'uint64', 'acqStatus', 'uint32', 'filenames', 'uint16PtrPtr');
structs.POWER_INFO.members=struct('externalPowerPresent', 'uint8', 'batteryPresent', 'uint8', 'batteryChargeLevel', 'double', 'batteryCharging', 'uint8', 'batteryOverTemperature', 'uint8', 'batteryHardwareError', 'uint8');
enuminfo.SpectrumVerticalUnits=struct('SpectrumVerticalUnit_dBm',0,'SpectrumVerticalUnit_Watt',1,'SpectrumVerticalUnit_Volt',2,'SpectrumVerticalUnit_Amp',3,'SpectrumVerticalUnit_dBmV',4);
enuminfo.SpectrumTraces=struct('SpectrumTrace1',0,'SpectrumTrace2',1,'SpectrumTrace3',2);
enuminfo.IQSOUTDTYPE=struct('IQSODT_SINGLE',0,'IQSODT_INT32',1,'IQSODT_INT16',2);
enuminfo.TraceType=struct('TraceTypeAverage',0,'TraceTypeMax',1,'TraceTypeMaxHold',2,'TraceTypeMin',3,'TraceTypeMinHold',4);
enuminfo.IQSOUTDEST=struct('IQSOD_CLIENT',0,'IQSOD_FILE_TIQ',1,'IQSOD_FILE_SIQ',2,'IQSOD_FILE_SIQ_SPLIT',3);
enuminfo.SpectrumDetectors=struct('SpectrumDetector_PosPeak',0,'SpectrumDetector_NegPeak',1,'SpectrumDetector_AverageVRMS',2,'SpectrumDetector_Sample',3);
enuminfo.TriggerTransition=struct('TriggerTransitionLH',1,'TriggerTransitionHL',2,'TriggerTransitionEither',3);
enuminfo.TriggerSource=struct('TriggerSourceExternal',0,'TriggerSourceIFPowerLevel',1);
enuminfo.SpectrumWindows=struct('SpectrumWindow_Kaiser',0,'SpectrumWindow_Mil6dB',1,'SpectrumWindow_BlackmanHarris',2,'SpectrumWindow_Rectangle',3,'SpectrumWindow_FlatTop',4,'SpectrumWindow_Hann',5);
enuminfo.GNSS_SATSYS=struct('GNSS_NOSYS',0,'GNSS_GPS_GLONASS',1,'GNSS_GPS_BEIDOU',2,'GNSS_GPS',3,'GNSS_GLONASS',4,'GNSS_BEIDOU',5);
enuminfo.ReturnStatus=struct('noError',0,'errorNotConnected',101,'errorIncompatibleFirmware',102,'errorBootLoaderNotRunning',103,'errorTooManyBootLoadersConnected',104,'errorRebootFailure',105,'errorPOSTFailureFPGALoad',201,'errorPOSTFailureHiPower',202,'errorPOSTFailureI2C',203,'errorPOSTFailureGPIF',204,'errorPOSTFailureUsbSpeed',205,'errorPOSTDiagFailure',206,'errorBufferAllocFailed',301,'errorParameter',302,'errorDataNotReady',303,'errorParameterTraceLength',1101,'errorMeasurementNotEnabled',1102,'errorSpanIsLessThanRBW',1103,'errorFrequencyOutOfRange',1104,'errorStreamADCToDiskFileOpen',1201,'errorStreamADCToDiskAlreadyStreaming',1202,'errorStreamADCToDiskBadPath',1203,'errorStreamADCToDiskThreadFailure',1204,'errorStreamedFileInvalidHeader',1205,'errorStreamedFileOpenFailure',1206,'errorStreamingOperationNotSupported',1207,'errorStreamingFastForwardTimeInvalid',1208,'errorStreamingInvalidParameters',1209,'errorStreamingEOF',1210,'errorIQStreamInvalidFileDataType',1301,'errorIQStreamFileOpenFailed',1302,'errorIQStreamBandwidthOutOfRange',1303,'errorTimeout',3001,'errorTransfer',3002,'errorFileOpen',3003,'errorFailed',3004,'errorCRC',3005,'errorChangeToFlashMode',3006,'errorChangeToRunMode',3007,'errorDSPLError',3008,'errorLOLockFailure',3009,'errorExternalReferenceNotEnabled',3010,'errorLogFailure',3011,'errorRegisterIO',3012,'errorFileRead',3013,'errorDisconnectedDeviceRemoved',3101,'errorDisconnectedDeviceNodeChangedAndRemoved',3102,'errorDisconnectedTimeoutWaitingForADcData',3103,'errorDisconnectedIOBeginTransfer',3104,'errorOperationNotSupportedInSimMode',3105,'errorFPGAConfigureFailure',3201,'errorCalCWNormFailure',3202,'errorSystemAppDataDirectory',3203,'errorFileCreateMRU',3204,'errorDeleteUnsuitableCachePath',3205,'errorUnableToSetFilePermissions',3206,'errorCreateCachePath',3207,'errorCreateCachePathBoost',3208,'errorCreateCachePathStd',3209,'errorCreateCachePathGen',3210,'errorBufferLengthTooSmall',3211,'errorRemoveCachePath',3212,'errorGetCachingDirectoryBoost',3213,'errorGetCachingDirectoryStd',3214,'errorGetCachingDirectoryGen',3215,'errorInconsistentFileSystem',3216,'errorWriteCalConfigHeader',3301,'errorWriteCalConfigData',3302,'errorReadCalConfigHeader',3303,'errorReadCalConfigData',3304,'errorEraseCalConfig',3305,'errorCalConfigFileSize',3306,'errorInvalidCalibConstantFileFormat',3307,'errorMismatchCalibConstantsSize',3308,'errorCalConfigInvalid',3309,'errorFlashFileSystemUnexpectedSize',3401,'errorFlashFileSystemNotMounted',3402,'errorFlashFileSystemOutOfRange',3403,'errorFlashFileSystemIndexNotFound',3404,'errorFlashFileSystemReadErrorCRC',3405,'errorFlashFileSystemReadFileMissing',3406,'errorFlashFileSystemCreateCacheIndex',3407,'errorFlashFileSystemCreateCachedDataFile',3408,'errorFlashFileSystemUnsupportedFileSize',3409,'errorFlashFileSystemInsufficentSpace',3410,'errorFlashFileSystemInconsistentState',3411,'errorFlashFileSystemTooManyFiles',3412,'errorFlashFileSystemImportFileNotFound',3413,'errorFlashFileSystemImportFileReadError',3414,'errorFlashFileSystemImportFileError',3415,'errorFlashFileSystemFileNotFoundError',3416,'errorFlashFileSystemReadBufferTooSmall',3417,'errorFlashWriteFailure',3418,'errorFlashReadFailure',3419,'errorFlashFileSystemBadArgument',3420,'errorFlashFileSystemCreateFile',3421,'errorMonitoringNotSupported',3501,'errorAuxDataNotAvailable',3502,'errorBatteryCommFailure',3601,'errorBatteryChargerCommFailure',3602,'errorBatteryNotPresent',3603,'errorESTOutputPathFile',3701,'errorESTPathNotDirectory',3702,'errorESTPathDoesntExist',3703,'errorESTUnableToOpenLog',3704,'errorESTUnableToOpenLimits',3705,'errorRevisionDataNotFound',3801,'error112MHzAlignmentSignalLevelTooLow',3901,'error10MHzAlignmentSignalLevelTooLow',3902,'errorInvalidCalConstant',3903,'errorNormalizationCacheInvalid',3904,'errorInvalidAlignmentCache',3905,'errorADCOverrange',9000,'errorOscUnlock',9001,'errorNotSupported',9901,'errorPlaceholder',9999,'notImplemented',-1);
enuminfo.AudioDemodMode=struct('ADM_FM_8KHZ',0,'ADM_FM_13KHZ',1,'ADM_FM_75KHZ',2,'ADM_FM_200KHZ',3,'ADM_AM_8KHZ',4,'ADM_NONE',5);
enuminfo.StreamingMode=struct('StreamingModeRaw',0,'StreamingModeFramed',1);
enuminfo.VerticalUnitType=struct('VerticalUnit_dBm',0,'VerticalUnit_Watt',1,'VerticalUnit_Volt',2,'VerticalUnit_Amp',3);
enuminfo.TriggerMode=struct('freeRun',0,'triggered',1);
methodinfo=fcns;