The API manages a complex instrument
It is not ideal for every user to be familiar with the procedure for making API calls
Some procedures require 20-37 API function calls to accomplish a single task

There is a "rsa306b_class" object to handle abstract the API
This class exposes the API capabilities, while enforcing correct operation
Speed is important for operating this instrument, and was a priority for the archetecture of the class
The class provides a robust framework to build on; new features can be easily added

The "cpu_timer_class" measures processing time required
It is helpful to gauge use cases and not create conditions where failure occurs
A CPU timer was required because the API only uses "time_t" data types (measures wall-clock)



usually avoided:
    "protected" members and functions       // not needed
    virtualization                          // not needed
    template - meta programming             // only used if STL or Boost uses it
    polymorphisim                           // not needed
    raw pointers with dynamic allocation    // let a proven STL or Boost data structure do that

common use:
    macros activate and deactivate specific sections and features of the program
    macros provide static values when required
    a single contructor for a class is prefered (there can only be 1 destructor)
    explicit naming results in self-commenting code
    "_*" is used for developers to quickly identify private members and functions
    every compilation unit has a header file
