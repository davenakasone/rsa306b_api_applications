git ls-files | xargs wc -l
    see if you can stay under 10e6 lines of code...
    
immediate TODO:
    SPECTRUM ".csv" should include a file-path-name ...base
    IFSTREAM should include a ".csv" writter, taking file-path-name
    constants should be moved to [./SRC/program_core/control]
    constants unique to the structs should be included in the struct header
    use enums and name spaces
    the return status enum should be common to all ".so" compiled binaries
    macros should be easily type-safed into "const <data_type>" + helps with python interface
    group formats
    if you look closley enough, many refactoring opportunities are present:
        - scanning a directory for a file extension
        - open + close a file for IO
        - API compatibility (base names, )
    revisit the structs...variables drive the API, so there is coordination between them...

thoughts for version 3:
    namespaces
    ctypes for the python interface (seems best)
    user features need to be specific
    data telemetry is too slow with google drive
    balance between getting the ".so" good and python good...both need to work

important classes:
    r3f_manager    // for raw "*.r3f" files
    siq_manager    // for raw "*siq" files
    rsa306b        // for API control, basic data processing, first measurement storage, and general operation

API Groups:
    ALIGN
    AUDIO
    CONFIG
    DEVICE
    DPX
    IFSTREAM
    IQBLK
    IQSTREAM
    PLAYBACK
    SPECTRUM
    REFTIME
    TRIG
    * general purpouse

Common Groups:
    ALIGN
    CONFIG
    DEVICE
    REFTIME
    TRIG
    * general purpouse

Data Groups:
    AUDIO
    IFSTREAM    // can produce a raw output file "*.r3f" + PLAYBACK
    IQBLK
    IQSTREAM    // can produce a raw output file "*.siq"
    SPECTRUM

Unit tests for the user interface, comprehensive:
    200 : connect, configure, basic IO
    201 : API group "AUDIO"
    202 : API group "IFSTREAM" + "PLAYBACK"
    203 : API group "IQBLK"
    204 : API group "IQSTREAM"
    205 : API group "SPECTRUM"

for the user:
    monitor
        after setting, wait for a power level to pass threshold during a specified duration
        if there was a "trigger", then produce X spectrum, iqs, iqb, ifs outputs...
    scan
        specifiy a bandwidth to scan
        scan the band, producing output when events of interest are detected
    grapher
        graph data based on file of interest...
        applies to spectrum, iqb, iqs, ifs
        maybe get that DPX in there
    file auto loader
        get around that slow upload time
        file loader works as a daemon/own thread

user, next-step features:
    printer...
    logger...
    GUI???
    RCNN trained on data (did not work good last time...try again?)
    GPS, camera, other 


////~~~~  a variable struct:

// description
# guard
# includes
# constexprs <TAG>_<NAME>
struct
    // group + description
    var
    _VAR  // initializer for var
    ...

    // limiting constants 

typedef struct
# close guard
tag EOF + \n

////~~~~ group implementation
    1) the public struct and private struct instance are placed in the class to allow the 3/4 buffer
    2) common utilities are used (when possible), to ensure operations only occur in 1 place + save time
    3) initializers always clear and init (place variables on known values)
    4) source files stay in same directory, try to group, but < 1k lines, you probably want to make a new file
    5) source file template + referenced in the class + Makefile / build system
    - clear()  -->  _init(), constructor can call through _init()
    - _copy_vars() --> individual private to public
    - print(), current state of member variables in the struct
    - write_vars(), so state of variables can be recorded
    - get_vars() --> _get_vars()  --> individual var getters --> _copy_vars()
    - set_vars()  -->  _set_vars()  -->  individual setters copy public to private, set, then _get_vars()
    - user*()  --> handles the user's needs in a controlled manner

////~~~~ file handlers

    - CODEZ load_file(char* raw_input), receive an input file
    - CODEZ load the file contents into member variables
    - 